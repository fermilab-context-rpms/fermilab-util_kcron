#!/bin/bash -u

###########################################################
if [[ -r /etc/sysconfig/kcron ]]; then
    source /etc/sysconfig/kcron
fi
if [[ -r ~/.config/kcron ]]; then
    source ~/.config/kcron
fi

###########################################################
#
# Copyright 2023 Fermi Research Alliance, LLC
#
# This software was produced under U.S. Government contract DE-AC02-07CH11359 for Fermi National Accelerator Laboratory (Fermilab), which is operated by Fermi Research Alliance, LLC for the U.S. Department of Energy. The U.S. Government has rights to use, reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR FERMI RESEARCH ALLIANCE, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is modified to produce derivative works, such modified software should be clearly marked, so as not to confuse it with the version available from Fermilab.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR FERMI RESEARCH ALLIANCE, LLC BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
###########################################################
#        Functions
###########################################################
usage() {
    echo '' >&2
    echo "$0" >&2
    echo '  The kcroninit utility creates a new principal of the form' >&2
    echo '  username/cron/host.domain@REALM  and then creates a keytab' >&2
    echo '  file that can be used by the kcron utility for authentication.' >&2
    echo '' >&2
    echo '  Most values are sourced from /etc/sysconfig/kcron' >&2
    echo '  or ~/.config/kcron' >&2
    echo '' >&2
    exit 1
}

###########################################################
destroy() {
    # Destroy credential cache
    ${DESTROY_CACHE}
    echo ''
    echo 'DESTROYED administration credentials.'
}

###########################################################
#        Options
###########################################################
# When a cron principal keytab is created for shared accounts
# which do not have a Kerberos principal, the admin principal will be
# the cron principal itself. It is assumed that the Service Desk already
# created the principal and only the keytab is needed.
# Reglar users are able to use their Kerberos principals to create cron principals.

ADMPRINCIPAL=${WHOAMI}
if [[ $# -ne 0 ]]; then
    if ! args=$(getopt -o sh); then
        usage
    fi

    eval set -- "$args"
    for _ in "$@"; do
        case $1 in

        --)
            break 2
            ;;
        -s)
            ADMPRINCIPAL="${WHOAMI}/cron/${NODENAME}"
            ;;
        -h)
            # get help
            usage
            ;;
        esac
    done
fi

###########################################################
#        Check if Kerberos utilities are installed
###########################################################
if ! which kadmin >/dev/null 2>&1; then
    echo ''
    echo "Could not find 'kadmin'" >&2
    echo "Consider installing krb5-workstation" >&2
    exit 2
fi
if ! which kinit >/dev/null 2>&1; then
    echo ''
    echo "Could not find 'kinit'" >&2
    echo "Consider installing krb5-workstation" >&2
    exit 2
fi
if ! which klist >/dev/null 2>&1; then
    echo ''
    echo "Could not find 'klist'" >&2
    echo "Consider installing krb5-workstation" >&2
    exit 2
fi
if ! which logger >/dev/null 2>&1; then
    echo ''
    echo "Could not find 'logger'" >&2
    echo "Consider installing util-linux" >&2
    exit 2
fi
if ! which md5sum >/dev/null 2>&1; then
    echo ''
    echo "Could not find 'md5sum'" >&2
    echo "Consider installing coreutils" >&2
    exit 2
fi
if ! which id >/dev/null 2>&1; then
    echo ''
    echo "Could not find 'id'" >&2
    echo "Consider installing coreutils" >&2
    exit 2
fi

kadmin=$(which kadmin)
kinit=$(which kinit)
klist=$(which klist)
DESTROY_CACHE=$(which kdestroy)

###########################################################
#        CONFIRM
###########################################################
echo "kcroninit creates principal ${FULLPRINCIPAL} and/or extracts its keys into a keytab."
echo "This principal is used by the kcron utility for authentication."
echo "You need to know the password for ${ADMPRINCIPAL} to continue."
while true; do
    read -r -p 'Do you want to continue? (y/n)' y_n
    case ${y_n} in
    [Yy]*) break ;;
    [Nn]*) exit ;;
    *)
        echo "Please answer 'y' or 'n'."
        exit
        ;;
    esac
done

###########################################################
#        SET UP CREDENTIAL CACHE
###########################################################
# In order to ask for password once need to obtain a ticket for kadmin/admin service
# Use temporary unique credential cache, which will be destroyed when kcron finishes.
# KEYRING format must be
# KEYRING:session:valid-uid:anything
# Get uid for current user
MYUID=$(id -u "${WHOAMI}")
SCRAMBLE=$(echo "$(
    date
    echo ${RANDOM}
)" | md5sum | /bin/cut -f1 -d" ")
export KRB5CCNAME="KEYRING:session:${MYUID}:${SCRAMBLE}"

###########################################################
#        Can I write to the keytab?
###########################################################
echo 'Is the keytab writable?'
if ! KEYTAB=$(${KEYTAB_INIT}); then
    echo ''
    echo 'Keytab is not writable to this user:' >&2
    id >&2
    ls -l ${KEYTAB} >&2
    exit 2
fi

###########################################################
#        Run
###########################################################
# Obtain credentials
echo 'Trying to obtain initial credentials'
if ! ${kinit} -c "${KRB5CCNAME}" -S kadmin/admin "${ADMPRINCIPAL}@${REALM}" >/dev/null >&2; then
    echo ''
    echo 'Failed to obtain initial credentials. Exiting...' >&2
    destroy
    exit 2
fi

# Check if principal is in Kerberos database.
PRINCIPAL_EXIST=$(${kadmin} -p "${ADMPRINCIPAL}@${REALM}" -c "${KRB5CCNAME}" -r "${REALM}" -q "get_principal ${FULLPRINCIPAL}" 2>/dev/null | grep "${FULLPRINCIPAL}")
echo "${PRINCIPAL_EXIST}"

# Skip create for existing principals, create otherwise
if [[ ${PRINCIPAL_EXIST} != '' ]]; then
    echo ''
    echo "Principal ${FULLPRINCIPAL} already exists in Kerberos database."
else
    echo ''
    echo 'Creating principal...'
    # Create principal
    ${kadmin} -p "${ADMPRINCIPAL}@${REALM}" -c "${KRB5CCNAME}" -r "${REALM}" -q "add_principal -randkey -pwexpire never ${FULLPRINCIPAL}" 2>/dev/null

    # Check if created successfully
    PRINCIPAL_EXIST=$(${kadmin} -p "${ADMPRINCIPAL}@${REALM}" -c "${KRB5CCNAME}" -r "${REALM}" -q "get_principal ${FULLPRINCIPAL}" 2>/dev/null | grep "${FULLPRINCIPAL}")
    if [[ ${PRINCIPAL_EXIST} == '' ]]; then
        echo ''
        echo "Cannot create principal ${FULLPRINCIPAL} in realm ${REALM}. Exiting..."
        destroy
        exit 2
    fi
fi

# Extract keytab
echo "Extracting keytab..."
${kadmin} -p "${ADMPRINCIPAL}@${REALM}" -c "${KRB5CCNAME}" -r "${REALM}" -q "ktadd -k ${KEYTAB} ${FULLPRINCIPAL}" 2>/dev/null
# Verify
PRINCIPAL_IN_KEYTAB=$(${klist} -k "${KEYTAB}" | grep "${FULLPRINCIPAL}")
if [[ ${PRINCIPAL_IN_KEYTAB} == '' ]]; then
    echo ''
    echo "Unable to extract ${FULLPRINCIPAL} keys into keytab ${KEYTAB}. Exiting..."
    exit 2
else
    echo ''
    echo "Created keytab ${KEYTAB}"
    ${klist} -k "${KEYTAB}" | grep "${FULLPRINCIPAL}"
fi

destroy
echo 'DONE!'
